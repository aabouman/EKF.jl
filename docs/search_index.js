var documenterSearchIndex = {"docs":
[{"location":"SimpleExample/","page":"Example","title":"Example","text":"EditURL = \"<unknown>/examples/SimpleExample.jl\"","category":"page"},{"location":"SimpleExample/#SimpleExample","page":"Example","title":"SimpleExample","text":"","category":"section"},{"location":"SimpleExample/","page":"Example","title":"Example","text":"PREAMBLE","category":"page"},{"location":"SimpleExample/","page":"Example","title":"Example","text":"PKG_SETUP","category":"page"},{"location":"SimpleExample/#Extened-Kalman-Filter-Example","page":"Example","title":"Extened Kalman Filter Example","text":"","category":"section"},{"location":"SimpleExample/","page":"Example","title":"Example","text":"using LinearAlgebra: Diagonal, I\nusing EKF\nusing Random\nusing Plots","category":"page"},{"location":"SimpleExample/#Defining-The-Process-and-Measurement-Functions","page":"Example","title":"Defining The Process and Measurement Functions","text":"","category":"section"},{"location":"SimpleExample/","page":"Example","title":"Example","text":"function process(xᵢ::AbstractVector, uᵢ::AbstractVector)\n    Δt = .1\n    A = [1 Δt 0  0;\n         0  1 0  0;\n         0  0 1 Δt;\n         0  0 0  1]\n    return A * xᵢ\nend\n\nfunction measure(xᵢ::AbstractVector)\n    x, ẋ, y, ẏ = xᵢ\n    return [sqrt(x^2 + y^2); atan(y, x)]\nend","category":"page"},{"location":"SimpleExample/#Defining-The-Covariances","page":"Example","title":"Defining The Covariances","text":"","category":"section"},{"location":"SimpleExample/","page":"Example","title":"Example","text":"Q = Matrix(Diagonal([0, .1, 0, .1]))\nR = Matrix(Diagonal([50^2, 0.005^2]));\nnothing #hide","category":"page"},{"location":"SimpleExample/","page":"Example","title":"Example","text":"ekf = ExtendedKalmanFilter(Q, R, process, measure)","category":"page"},{"location":"SimpleExample/","page":"Example","title":"Example","text":"Random.seed!(1)\ninitState = rand(4)\ninitEstimate = rand(4)\nerrorCov = I(4) * .001\ninputs = zeros(1000, 2)\n\nθ̄s, θ̂s = simulate(initState::AbstractArray, initEstimate::AbstractArray,\n                  errorCov, inputs::AbstractArray, ekf);\nnothing #hide","category":"page"},{"location":"SimpleExample/","page":"Example","title":"Example","text":"p1 = plot(θ̂s[:, 1])\nplot!(p1, θ̄s[:, 1])","category":"page"},{"location":"SimpleExample/","page":"Example","title":"Example","text":"","category":"page"},{"location":"SimpleExample/","page":"Example","title":"Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#EKF.jl-Documentation","page":"Home","title":"EKF.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package implements a simple Extended Kalman Filter","category":"page"},{"location":"documentation/#EKF.jl-Documentation","page":"Documentation","title":"EKF.jl Documentation","text":"","category":"section"},{"location":"documentation/#Index","page":"Documentation","title":"Index","text":"","category":"section"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"","category":"page"},{"location":"documentation/#Extended-Kalman-Filtering","page":"Documentation","title":"Extended Kalman Filtering","text":"","category":"section"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"EKF.ExtendedKalmanFilter","category":"page"},{"location":"documentation/#EKF.ExtendedKalmanFilter","page":"Documentation","title":"EKF.ExtendedKalmanFilter","text":"struct ExtendedKalmanFilter{T}\n\nExtended Kalman Filter struct. Stores the dynamics and measurement functions as well as their cooresponding covariances.\n\nArguments\n\nQ::AbstractArray{T}: Dynamics noise covariance matrix, must be symmetric\nR::AbstractArray{T}: Measurement noise covariance matrix, must be symmetric\nprocess::Function: dynamics function, steps the system forward\nmeasure::Function: measurement function\n\nThe process and measure function have the following forms:\n\nfunction process(state::AbstractVector, input::AbstractVector)\n    ...\n    return new_state\nend\n\nfunction measure(state::AbstractVector)\n    ...\n    return [θ₁, θ₂]\nend\n\n\n\n\n\n","category":"type"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"EKF.estimateState","category":"page"},{"location":"documentation/#EKF.estimateState","page":"Documentation","title":"EKF.estimateState","text":"estimateState(est_state::AbstractArray{T}, input::AbstractArray{T},                measurement::AbstractArray{T}, errorCov::AbstractArray{T},                ekf::ExtendedKalmanFilter{T}) where T\n\nEstimate the state of the system specified by ekf. Returns the new state at time step i+1\n\nArguments\n\nest_state::AbstractArray{T}: Estimated state at time step i\ninput::AbstractArray{T}: Control input at time step i\nmeasurement::AbstractArray{T}: Measurment of state at time step i\nerrorCov::AbstractArray{T}: Covariance error\nekf::ExtendedKalmanFilter{T}: ExtendedKalmanFilter struct specifying the dynamics and process aswell as their covariances\n\nThe process and measure function have the following forms:\n\nfunction process(state::AbstractVector, input::AbstractVector)\n    ...\n    return new_state\nend\n\nfunction measure(state::AbstractVector)\n    ...\n    return [θ₁, θ₂]\nend\n\nBoth of these functions must be differentiable using the ForwardDiff package.\n\n\n\n\n\n","category":"function"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"EKF.simulate","category":"page"},{"location":"documentation/#EKF.simulate","page":"Documentation","title":"EKF.simulate","text":"simulate(initState::AbstractArray, initEstimate::AbstractArray,           errorCov::AbstractArray, inputs::AbstractArray,           numSteps::Int64, ekf::ExtendedKalmanFilter)\n\nSimulates the system specified by ekf::ExtendedKalmanFilter over time horizon.\n\nArguments\n\ninitState::AbstractArray: Inital state at time step 0\ninitEstimate::AbstractArray: Inital \"guess\" of the state at time step 0\nerrorCov::AbstractArray: Error covariances at each time step\ninputs::AbstractArray: List of inputs for each time step\nnumSteps::Int64: Covariance error\nekf::ExtendedKalmanFilter: ExtendedKalmanFilter struct specifying the dynamics and process as well as their covariances\n\n\n\n\n\n","category":"function"}]
}
